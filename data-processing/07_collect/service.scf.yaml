description: >
  A collect rule example that aggregates environmental data from multiple
  sensors into a single snapshot for monitoring.

metadata:
  name: Collect Rule - Environmental Snapshot

resources:
  # Example 1: Basic Collect - Array subscription without labels
  # Uses topic paths as cache keys
  basicEnvironmentalSnapshot:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          - topic: sensors/temperature
          - topic: sensors/humidity  
          - topic: sensors/pressure
        publish:
          topic: environment/basic-snapshot
        rules:
        - collect: {}  # Cache keys = topic paths
    # Input Messages:
    # sensors/temperature: {"value": 23.5, "unit": "°C", "timestamp": "2025-10-29T10:00:01Z"}
    # sensors/humidity: {"value": 65.2, "unit": "%", "timestamp": "2025-10-29T10:00:02Z"}
    # sensors/pressure: {"value": 1013.1, "unit": "hPa", "timestamp": "2025-10-29T10:00:03Z"}
    #
    # Output Message (after all sensors have sent data):
    # environment/basic-snapshot: {
    #   "sensors/temperature": {"value": 23.5, "unit": "°C", "timestamp": "2025-10-29T10:00:01Z"},
    #   "sensors/humidity": {"value": 65.2, "unit": "%", "timestamp": "2025-10-29T10:00:02Z"},
    #   "sensors/pressure": {"value": 1013.1, "unit": "hPa", "timestamp": "2025-10-29T10:00:03Z"}
    # }

  # Example 2: Collect with Static Labels
  # Cleaner cache keys for easier data access
  labeledEnvironmentalSnapshot:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          - topic: sensors/office/temperature
            label: temp
          - topic: sensors/office/humidity
            label: humidity
          - topic: sensors/office/pressure
            label: pressure
        publish:
          topic: environment/office-snapshot
        rules:
        - collect: {}
        - transform:
            expression: |
              {
                "office_conditions": {
                  "temperature": $lookup($, 'temp'),
                  "humidity": $lookup($, 'humidity'),
                  "pressure": $lookup($, 'pressure'),
                  "comfort_index": ($lookup($, 'temp').value >= 20 and $lookup($, 'temp').value <= 25) and ($lookup($, 'humidity').value >= 40 and $lookup($, 'humidity').value <= 60) ? "comfortable" : "uncomfortable"
                },
                "snapshot_timestamp": $now()
              }
    # Input Messages:
    # sensors/office/temperature: {"value": 22.8, "unit": "°C", "sensor_id": "TEMP-001"}
    # sensors/office/humidity: {"value": 55.3, "unit": "%", "sensor_id": "HUM-001"}  
    # sensors/office/pressure: {"value": 1012.7, "unit": "hPa", "sensor_id": "PRESS-001"}
    #
    # Collect Cache (before transform):
    # {
    #   "temp": {"value": 22.8, "unit": "°C", "sensor_id": "TEMP-001"},
    #   "humidity": {"value": 55.3, "unit": "%", "sensor_id": "HUM-001"},
    #   "pressure": {"value": 1012.7, "unit": "hPa", "sensor_id": "PRESS-001"}
    # }
    #
    # Output Message (after transform):
    # environment/office-snapshot: {
    #   "office_conditions": {
    #     "temperature": {"value": 22.8, "unit": "°C", "sensor_id": "TEMP-001"},
    #     "humidity": {"value": 55.3, "unit": "%", "sensor_id": "HUM-001"},
    #     "pressure": {"value": 1012.7, "unit": "hPa", "sensor_id": "PRESS-001"},
    #     "comfort_index": "comfortable"
    #   },
    #   "snapshot_timestamp": 1730203201000
    # }

  # Example 3: Collect with Dynamic Labels - Single Wildcard
  # One wildcard creates unique labels per room
  roomEnvironmentalMonitoring:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: building/+room/sensors/temperature
          label: 'temp_{room}'  # Dynamic label per room
        publish:
          topic: building/temperature-overview
        rules:
        - collect: {}
        - transform:
            expression: |
              {
                "building_temperatures": $,
                "room_count": $count($keys($)),
                "temperature_stats": {
                  "average": $average($map($keys($), function($k) { $lookup($, $k).value })),
                  "min": $min($map($keys($), function($k) { $lookup($, $k).value })),
                  "max": $max($map($keys($), function($k) { $lookup($, $k).value }))
                },
                "rooms_above_25c": $filter($keys($), function($k) { $lookup($, $k).value > 25 }) ~> $map(_, function($k) { $substringAfter($k, 'temp_') })
              }
    # Input Messages:
    # building/office-a/sensors/temperature: {"value": 23.2, "unit": "°C", "timestamp": "2025-10-29T10:00:01Z"}
    # building/conference/sensors/temperature: {"value": 26.8, "unit": "°C", "timestamp": "2025-10-29T10:00:02Z"}
    # building/lobby/sensors/temperature: {"value": 21.5, "unit": "°C", "timestamp": "2025-10-29T10:00:03Z"}
    # building/kitchen/sensors/temperature: {"value": 28.1, "unit": "°C", "timestamp": "2025-10-29T10:00:04Z"}
    #
    # Collect Cache (with dynamic labels):
    # {
    #   "temp_office-a": {"value": 23.2, "unit": "°C", "timestamp": "2025-10-29T10:00:01Z"},
    #   "temp_conference": {"value": 26.8, "unit": "°C", "timestamp": "2025-10-29T10:00:02Z"},
    #   "temp_lobby": {"value": 21.5, "unit": "°C", "timestamp": "2025-10-29T10:00:03Z"},
    #   "temp_kitchen": {"value": 28.1, "unit": "°C", "timestamp": "2025-10-29T10:00:04Z"}
    # }
    #
    # Output Message:
    # building/temperature-overview: {
    #   "building_temperatures": {collect cache object},
    #   "room_count": 4,
    #   "temperature_stats": {
    #     "average": 24.9,
    #     "min": 21.5,
    #     "max": 28.1
    #   },
    #   "rooms_above_25c": ["conference", "kitchen"]
    # }

  # Example 4: Collect with Multi-Level Dynamic Labels
  # Multiple wildcards create structured labels
  multiLevelEnvironmentalMonitoring:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: building/+floor/+room/+sensor/readings
          label: '{floor}_{room}_{sensor}'  # Multi-level dynamic label
        publish:
          topic: building/comprehensive-snapshot
        rules:
        - collect: {}
        - transform:
            expression: |
              (
                $floors := $distinct($map($keys($), function($k) { $split($k, '_')[0] }));
                $sensors := $distinct($map($keys($), function($k) { $split($k, '_')[2] }));
                
                {
                  "building_overview": {
                    "total_sensors": $count($keys($)),
                    "floors_monitored": $floors,
                    "sensor_types": $sensors,
                    "data_by_floor": $map($floors, function($floor) {
                      $floorSensors := $filter($keys($), function($k) { $split($k, '_')[0] = $floor });
                      {
                        "floor": $floor,
                        "sensor_count": $count($floorSensors),
                        "rooms": $distinct($map($floorSensors, function($k) { $split($k, '_')[1] })),
                        "readings": $map($floorSensors, function($k) {
                          $parts := $split($k, '_');
                          {
                            "room": $parts[1],
                            "sensor": $parts[2], 
                            "data": $lookup($, $k)
                          }
                        })
                      }
                    })
                  }
                }
              )
    # Input Messages:
    # building/floor-1/office-101/temperature/readings: {"value": 22.5, "unit": "°C", "status": "normal"}
    # building/floor-1/office-101/humidity/readings: {"value": 58.2, "unit": "%", "status": "normal"}
    # building/floor-1/conference-a/temperature/readings: {"value": 24.1, "unit": "°C", "status": "normal"}
    # building/floor-2/office-201/temperature/readings: {"value": 23.8, "unit": "°C", "status": "normal"}
    # building/floor-2/office-201/pressure/readings: {"value": 1013.5, "unit": "hPa", "status": "normal"}
    #
    # Collect Cache (with multi-level dynamic labels):
    # {
    #   "floor-1_office-101_temperature": {"value": 22.5, "unit": "°C", "status": "normal"},
    #   "floor-1_office-101_humidity": {"value": 58.2, "unit": "%", "status": "normal"},
    #   "floor-1_conference-a_temperature": {"value": 24.1, "unit": "°C", "status": "normal"},
    #   "floor-2_office-201_temperature": {"value": 23.8, "unit": "°C", "status": "normal"},
    #   "floor-2_office-201_pressure": {"value": 1013.5, "unit": "hPa", "status": "normal"}
    # }
    #
    # Output Message (structured by floor):
    # building/comprehensive-snapshot: {
    #   "building_overview": {
    #     "total_sensors": 5,
    #     "floors_monitored": ["floor-1", "floor-2"],
    #     "sensor_types": ["temperature", "humidity", "pressure"],
    #     "data_by_floor": [
    #       {
    #         "floor": "floor-1",
    #         "sensor_count": 3,
    #         "rooms": ["office-101", "conference-a"],
    #         "readings": [detailed sensor readings for floor-1]
    #       },
    #       {
    #         "floor": "floor-2", 
    #         "sensor_count": 2,
    #         "rooms": ["office-201"],
    #         "readings": [detailed sensor readings for floor-2]
    #       }
    #     ]
    #   }
    # }

  # Example 5: Manufacturing Use Case - Equipment Status Collection
  # Real-world manufacturing scenario with equipment monitoring
  manufacturingEquipmentStatus:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          - topic: factory/line-a/cnc-001/status
            label: cnc_001_status
          - topic: factory/line-a/cnc-001/performance
            label: cnc_001_perf
          - topic: factory/line-a/robot-arm/status
            label: robot_status
          - topic: factory/line-a/conveyor/status
            label: conveyor_status
          - topic: factory/line-a/quality-scanner/status
            label: scanner_status
        publish:
          topic: factory/line-a/operational-status
        rules:
        - collect: {}
        - transform:
            expression: |
              (
                $equipmentStatus := [
                  {"equipment": "cnc-001", "status": $lookup($, 'cnc_001_status'), "performance": $lookup($, 'cnc_001_perf')},
                  {"equipment": "robot-arm", "status": $lookup($, 'robot_status')},
                  {"equipment": "conveyor", "status": $lookup($, 'conveyor_status')},
                  {"equipment": "quality-scanner", "status": $lookup($, 'scanner_status')}
                ];
                
                $operationalEquipment := $filter($equipmentStatus, function($eq) { $eq.status.operational = true });
                $errorEquipment := $filter($equipmentStatus, function($eq) { $eq.status.operational = false });
                
                {
                  "line_summary": {
                    "line_id": "line-a", 
                    "timestamp": $now(),
                    "overall_status": $count($errorEquipment) = 0 ? "operational" : "degraded",
                    "equipment_count": {
                      "total": $count($equipmentStatus),
                      "operational": $count($operationalEquipment),
                      "errors": $count($errorEquipment)
                    }
                  },
                  "equipment_details": $equipmentStatus,
                  "alerts": $count($errorEquipment) > 0 ? $map($errorEquipment, function($eq) {
                    {
                      "equipment": $eq.equipment,
                      "error": $eq.status.error_message,
                      "priority": "high"
                    }
                  }) : []
                }
              )
    # Input Messages:
    # factory/line-a/cnc-001/status: {"operational": true, "temperature": 68.5, "spindle_speed": 2500}
    # factory/line-a/cnc-001/performance: {"oee": 0.85, "cycle_time": 45.2, "quality_rate": 0.98}
    # factory/line-a/robot-arm/status: {"operational": true, "position": "home", "load": 0}
    # factory/line-a/conveyor/status: {"operational": false, "speed": 0, "error_message": "Motor fault"}
    # factory/line-a/quality-scanner/status: {"operational": true, "scan_rate": 95.2, "defects_detected": 2}
    #
    # Output Message:
    # factory/line-a/operational-status: {
    #   "line_summary": {
    #     "line_id": "line-a",
    #     "timestamp": 1730203201000,
    #     "overall_status": "degraded",
    #     "equipment_count": {
    #       "total": 4,
    #       "operational": 3,
    #       "errors": 1
    #     }
    #   },
    #   "equipment_details": [array of equipment status],
    #   "alerts": [
    #     {
    #       "equipment": "conveyor",
    #       "error": "Motor fault", 
    #       "priority": "high"
    #     }
    #   ]
    # }