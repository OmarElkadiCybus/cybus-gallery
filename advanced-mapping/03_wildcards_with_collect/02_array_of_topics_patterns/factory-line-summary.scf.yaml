description: >
  Multi-domain monitoring with array of completely different topic patterns.
  Shows when arrays are essential for topics that cannot be unified.
  Demonstrates input from different domains, collect payload, and integrated output.

metadata:
  name: Multi-Domain Monitoring - Different Topic Structures

resources:
  # Multi-domain monitoring with different topic patterns
  multiDomainMapping:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          # Array subscription - different topic structures!
          - topic: factory/production/+line/status        # 4 levels - production domain
            label: 'prod_{line}'
          - topic: maintenance/schedule/+equipment/next    # 4 levels - maintenance domain  
            label: 'maint_{equipment}'
          - topic: quality/inspection/+batch/result        # 4 levels - quality domain
            label: 'quality_{batch}'
        publish:
          topic: business/integrated/summary
        rules:
        - collect: {}  # Aggregates ALL different topic structures
        - transform:
            expression: |
              (
                $domain := $split($context.topic, '/')[0];
                $trigger := $domain = 'factory' ? 'prod_' & $context.vars.line :
                            $domain = 'maintenance' ? 'maint_' & $context.vars.equipment :
                            'quality_' & $context.vars.batch;
                $triggerData := $lookup($, $trigger);
                
                {
                  "timestamp": $now(),
                  "triggered_by": {
                    "domain": $domain,
                    "identifier": $domain = 'factory' ? $context.vars.line :
                                  $domain = 'maintenance' ? $context.vars.equipment :
                                  $context.vars.batch,
                    "data": $triggerData
                  },
                  "business_overview": {
                    "total_items": $count($keys($)),
                    "production_lines": $count($filter($keys($), function($k) { $contains($k, 'prod_') })),
                    "maintenance_items": $count($filter($keys($), function($k) { $contains($k, 'maint_') })),
                    "quality_batches": $count($filter($keys($), function($k) { $contains($k, 'quality_') }))
                  },
                  "all_business_data": $
                }
              )
    # Why Array Subscription is Required:
    # These topics have DIFFERENT structures that cannot be unified with single wildcard:
    # - factory/production/{line}/status      (production domain)
    # - maintenance/schedule/{equipment}/next (maintenance domain)
    # - quality/inspection/{batch}/result     (quality domain)
    # 
    # Example Flow: Different domains send messages, all collected for integrated analysis
    #
    # Step 1 - Input Messages from Different Domains:
    # factory/production/line-a/status → {"status": "running", "output_rate": 45, "efficiency": 0.92}
    # maintenance/schedule/pump-005/next → {"date": "2024-10-30", "duration_hours": 4, "priority": "high"}
    # quality/inspection/batch-001/result → {"passed": true, "defects": 0, "quality_score": 98.5}
    #
    # Step 2 - Collect Payload (before transform):
    # {
    #   "prod_line-a": {"status": "running", "output_rate": 45, "efficiency": 0.92},
    #   "maint_pump-005": {"date": "2024-10-30", "duration_hours": 4, "priority": "high"},
    #   "quality_batch-001": {"passed": true, "defects": 0, "quality_score": 98.5}
    # }
    #
    # Step 3 - Transform Output (when quality message arrives):
    # {
    #   "timestamp": 1730115600000,
    #   "triggered_by": {
    #     "domain": "quality",
    #     "identifier": "batch-001",
    #     "data": {"passed": true, "defects": 0, "quality_score": 98.5}
    #   },
    #   "business_overview": {
    #     "total_items": 3,
    #     "production_lines": 1,
    #     "maintenance_items": 1,
    #     "quality_batches": 1
    #   },
    #   "all_business_data": {
    #     "prod_line-a": {"status": "running", "output_rate": 45, "efficiency": 0.92},
    #     "maint_pump-005": {"date": "2024-10-30", "duration_hours": 4, "priority": "high"},
    #     "quality_batch-001": {"passed": true, "defects": 0, "quality_score": 98.5}
    #   }
    # }
    #
    # Key Benefits of Array Subscription:
    # ✅ Handles incompatible topic structures in one service
    # ✅ Cross-domain business intelligence and correlation
    # ✅ Dynamic labels prevent data loss across different domains
    # ✅ Unified analytics across production, maintenance, and quality systems