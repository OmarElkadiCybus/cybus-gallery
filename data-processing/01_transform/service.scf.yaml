description: >
  Simple transform rule examples showing how to reshape, rename, calculate,
  and enrich your message data using JSONata expressions.

metadata:
  name: Transform Rule - Simple Examples

resources:
  # Example 1: Basic Field Renaming
  fieldRenaming:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: sensors/raw
        publish:
          topic: sensors/renamed
        rules:
        - transform:
            expression: |
              {
                "temperature": $.temp,        # temp → temperature
                "humidity": $.hum,            # hum → humidity  
                "device_id": $.id,            # id → device_id
                "location": $.loc             # loc → location
              }
    # Input Example:
    # {"temp": 25, "hum": 60, "id": "sensor-01", "loc": "warehouse"}
    #
    # Output Example:
    # {"temperature": 25, "humidity": 60, "device_id": "sensor-01", "location": "warehouse"}

  # Example 2: Adding New Fields
  addingFields:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: devices/reading
        publish:
          topic: devices/enriched
        rules:
        - transform:
            expression: |
              {
                "original_data": $,           # Keep all original data
                "timestamp": $now(),          # Add current time
                "source": "sensor-network",   # Add static value
                "is_valid": $.value > 0,      # Add validation check
                "processor": "cybus"          # Add metadata
              }
    # Input Example:
    # {"value": 150, "sensor": "temp-01"}
    #
    # Output Example:
    # {
    #   "original_data": {"value": 150, "sensor": "temp-01"},
    #   "timestamp": "2024-10-29T10:30:00Z",
    #   "source": "sensor-network",
    #   "is_valid": true,
    #   "processor": "cybus"
    # }

  # Example 3: Simple Calculations
  calculations:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: temperature/fahrenheit
        publish:
          topic: temperature/converted
        rules:
        - transform:
            expression: |
              {
                "fahrenheit": $.temp,
                "celsius": ($.temp - 32) * 5/9,
                "kelvin": (($.temp - 32) * 5/9) + 273.15,
                "sensor": $.sensor
              }
    # Input Example:
    # {"temp": 72, "sensor": "room-01"}
    #
    # Output Example:
    # {
    #   "fahrenheit": 72,
    #   "celsius": 22.22,
    #   "kelvin": 295.37,
    #   "sensor": "room-01"
    # }

  # Example 4: Data Restructuring
  restructuring:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: flat/sensor_data
        publish:
          topic: structured/sensor_data
        rules:
        - transform:
            expression: |
              {
                "device": {
                  "id": $.device_id,
                  "name": $.device_name,
                  "type": "environmental"
                },
                "readings": {
                  "temperature": $.temp,
                  "humidity": $.humidity,
                  "pressure": $.pressure
                },
                "metadata": {
                  "timestamp": $now(),
                  "location": $.location
                }
              }
    # Input Example:
    # {
    #   "device_id": "env-01",
    #   "device_name": "Environmental Sensor",
    #   "temp": 23,
    #   "humidity": 65,
    #   "pressure": 1013,
    #   "location": "office"
    # }
    #
    # Output Example:
    # {
    #   "device": {
    #     "id": "env-01",
    #     "name": "Environmental Sensor", 
    #     "type": "environmental"
    #   },
    #   "readings": {
    #     "temperature": 23,
    #     "humidity": 65,
    #     "pressure": 1013
    #   },
    #   "metadata": {
    #     "timestamp": "2024-10-29T10:30:00Z",
    #     "location": "office"
    #   }
    # }

  # Example 5: Conditional Logic
  conditionalLogic:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: sensors/battery
        publish:
          topic: alerts/battery_status
        rules:
        - transform:
            expression: |
              {
                "device_id": $.device,
                "battery_level": $.battery,
                "status": $.battery > 80 ? "excellent" : 
                         $.battery > 50 ? "good" :
                         $.battery > 20 ? "low" : "critical",
                "needs_replacement": $.battery < 20,
                "alert_priority": $.battery < 20 ? "high" :
                                 $.battery < 50 ? "medium" : "low",
                "timestamp": $now()
              }
    # Input Examples:
    #
    # Example A - Good Battery:
    # {"device": "sensor-01", "battery": 85}
    # Output: {
    #   "device_id": "sensor-01",
    #   "battery_level": 85,
    #   "status": "excellent",
    #   "needs_replacement": false,
    #   "alert_priority": "low"
    # }
    #
    # Example B - Low Battery:
    # {"device": "sensor-02", "battery": 15}
    # Output: {
    #   "device_id": "sensor-02", 
    #   "battery_level": 15,
    #   "status": "critical",
    #   "needs_replacement": true,
    #   "alert_priority": "high"
    # }