description: >
  A change-of-value (COV) rule example that filters temperature readings
  using deadband to reduce noise and only forward significant changes.

metadata:
  name: COV Rule - Temperature Deadband Filtering

resources:
  # ============================================================================
  # PROGRESSIVE COV EXAMPLES: Building from Basic to Advanced Usage
  # ============================================================================

  # Level 1: BASIC COV - Simplest possible usage
  # Monitor any field change without deadband (exact match)
  basicStringMonitoring:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: machine/status
        publish:
          topic: machine/status-changes
        rules:
        - cov:
            key: state    # Only required parameter - monitor 'state' field
    # Input Messages:
    # machine/status: {"state": "running", "speed": 1800}
    # machine/status: {"state": "running", "speed": 1820} ← FILTERED (state unchanged)  
    # machine/status: {"state": "stopped", "speed": 0}   ← PASSES (state changed)
    # machine/status: {"state": "stopped", "speed": 0}   ← FILTERED (state unchanged)
    # machine/status: {"state": "error", "speed": 0}     ← PASSES (state changed)
    #
    # Output Messages (only when 'state' field changes):
    # machine/status-changes: {"state": "running", "speed": 1800}
    # machine/status-changes: {"state": "stopped", "speed": 0}  
    # machine/status-changes: {"state": "error", "speed": 0}

  # Level 2: COV with ABSOLUTE deadband
  # Add numeric threshold for filtering noise
  basicNumericFiltering:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: sensors/temperature/raw
        publish:
          topic: sensors/temperature/filtered
        rules:
        - cov:
            key: temperature        # Monitor 'temperature' field
            deadband: 0.5          # Must change by ±0.5 to pass through
            deadbandMode: absolute # Fixed threshold (not percentage)
    # Input Messages:
    # sensors/temperature/raw: {"temperature": 22.0, "humidity": 60, "timestamp": "10:00:01"}
    # sensors/temperature/raw: {"temperature": 22.1, "humidity": 61, "timestamp": "10:00:02"} ← FILTERED (change = 0.1 < 0.5)
    # sensors/temperature/raw: {"temperature": 22.3, "humidity": 62, "timestamp": "10:00:03"} ← FILTERED (total change = 0.3 < 0.5)
    # sensors/temperature/raw: {"temperature": 22.6, "humidity": 63, "timestamp": "10:00:04"} ← PASSES (change = 0.6 > 0.5)
    # sensors/temperature/raw: {"temperature": 22.8, "humidity": 64, "timestamp": "10:00:05"} ← FILTERED (change = 0.2 < 0.5)
    # sensors/temperature/raw: {"temperature": 21.9, "humidity": 65, "timestamp": "10:00:06"} ← PASSES (change = 0.9 > 0.5)
    #
    # Output Messages (only significant changes):
    # sensors/temperature/filtered: {"temperature": 22.0, "humidity": 60, "timestamp": "10:00:01"} ← First message always passes
    # sensors/temperature/filtered: {"temperature": 22.6, "humidity": 63, "timestamp": "10:00:04"} ← Changed by +0.6 from 22.0
    # sensors/temperature/filtered: {"temperature": 21.9, "humidity": 65, "timestamp": "10:00:06"} ← Changed by -0.7 from 22.6

  # Level 3: COV with RELATIVE deadband  
  # Percentage-based filtering for wide-range values
  relativeDeadbandFiltering:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: equipment/press/pressure
        publish:
          topic: equipment/press/pressure/filtered
        rules:
        - cov:
            key: pressure_bar
            deadband: 5            # 5% change required
            deadbandMode: relative # Percentage-based threshold
    # Input Messages:
    # equipment/press/pressure: {"pressure_bar": 100.0, "cycle_count": 1450}
    # equipment/press/pressure: {"pressure_bar": 102.0, "cycle_count": 1451} ← FILTERED (2% change < 5%)
    # equipment/press/pressure: {"pressure_bar": 106.0, "cycle_count": 1452} ← PASSES (6% change > 5%)
    # equipment/press/pressure: {"pressure_bar": 108.0, "cycle_count": 1453} ← FILTERED (1.9% change < 5%)
    # equipment/press/pressure: {"pressure_bar": 115.0, "cycle_count": 1454} ← PASSES (8.5% change > 5%)
    #
    # Output Messages:
    # equipment/press/pressure/filtered: {"pressure_bar": 100.0, "cycle_count": 1450}
    # equipment/press/pressure/filtered: {"pressure_bar": 106.0, "cycle_count": 1452}
    # equipment/press/pressure/filtered: {"pressure_bar": 115.0, "cycle_count": 1454}

  # Level 4: MULTIPLE COV rules in one mapping
  # Monitor different fields with different strategies (OR logic)
  multipleFieldMonitoring:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: equipment/motor/all-sensors
        publish:
          topic: equipment/motor/significant-changes
        rules:
        - cov:
            key: mode             # String field - exact match
        - cov:
            key: temperature      # Numeric field - with deadband
            deadband: 2.0
            deadbandMode: absolute
        - cov:
            key: alarm_active     # Boolean field - exact match
    # Input Messages:
    # equipment/motor/all-sensors: {"mode": "auto", "temperature": 65.0, "alarm_active": false, "rpm": 1800}
    # equipment/motor/all-sensors: {"mode": "auto", "temperature": 65.5, "alarm_active": false, "rpm": 1805} ← FILTERED (no significant changes)
    # equipment/motor/all-sensors: {"mode": "manual", "temperature": 65.7, "alarm_active": false, "rpm": 1810} ← PASSES (mode changed)
    # equipment/motor/all-sensors: {"mode": "manual", "temperature": 67.2, "alarm_active": true, "rpm": 1815} ← PASSES (temp +2.2°C AND alarm changed)
    #
    # Output Messages (passes if ANY monitored field meets criteria):
    # equipment/motor/significant-changes: {"mode": "auto", "temperature": 65.0, "alarm_active": false, "rpm": 1800}
    # equipment/motor/significant-changes: {"mode": "manual", "temperature": 65.7, "alarm_active": false, "rpm": 1810}
    # equipment/motor/significant-changes: {"mode": "manual", "temperature": 67.2, "alarm_active": true, "rpm": 1815}

  # Level 5: COV + TRANSFORM combination
  # Add data processing to filtered results
  covWithTransform:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: production/quality/measurements
        publish:
          topic: production/quality/alerts
        rules:
        - cov:
            key: diameter_mm      # Monitor critical dimension
            deadband: 0.01       # Tight tolerance: ±0.01mm
            deadbandMode: absolute
        - transform:
            expression: |
              {
                "part_id": $.part_id,
                "measurement": $.diameter_mm,
                "target": 25.05,
                "deviation": $.diameter_mm - 25.05,
                "status": ($.diameter_mm >= 25.00 and $.diameter_mm <= 25.10) ? "PASS" : "FAIL",
                "alert_level": ($.diameter_mm < 25.02 or $.diameter_mm > 25.08) ? "warning" : "info",
                "timestamp": $now()
              }
    # Input Messages:
    # production/quality/measurements: {"part_id": "P001", "diameter_mm": 25.050}
    # production/quality/measurements: {"part_id": "P002", "diameter_mm": 25.052} ← FILTERED (change = 0.002 < 0.01)
    # production/quality/measurements: {"part_id": "P003", "diameter_mm": 25.062} ← PASSES (change = 0.012 > 0.01)
    # production/quality/measurements: {"part_id": "P004", "diameter_mm": 25.065} ← FILTERED (change = 0.003 < 0.01)  
    # production/quality/measurements: {"part_id": "P005", "diameter_mm": 25.035} ← PASSES (change = 0.030 > 0.01)
    #
    # Output Messages (filtered + transformed):
    # production/quality/alerts: {
    #   "part_id": "P001", "measurement": 25.050, "deviation": -0.000, "status": "PASS", "alert_level": "info"
    # }
    # production/quality/alerts: {
    #   "part_id": "P003", "measurement": 25.062, "deviation": 0.012, "status": "PASS", "alert_level": "info"
    # }
    # production/quality/alerts: {
    #   "part_id": "P005", "measurement": 25.035, "deviation": -0.015, "status": "PASS", "alert_level": "warning"
    # }

  # ============================================================================
  # ADVANCED EXAMPLES: Real-world endpoint usage and complex scenarios
  # ============================================================================

  # Level 6: ENDPOINT usage (most common in production)
  # COV applied at data source for maximum efficiency
  opcuaEndpointExample:
    type: Cybus::Endpoint
    properties:
      protocol: Opcua
      connection: "opc.tcp://plc.factory.local:4840"
      subscribe:
        nodeId: "ns=2;s=TemperatureSensor.Value"
      rules:
      - cov:
          key: value
          deadband: 0.5
          deadbandMode: absolute
      topic: factory/plc/temperature/filtered
    # Benefit: OPC-UA updates every 100ms → MQTT publishes only on ±0.5°C changes
    # Network traffic reduction: ~75% while preserving all significant changes

  # Level 7: COMPLEX object monitoring  
  # Monitor entire configuration objects for changes
  configurationMonitoring:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: system/config/updates
        publish:
          topic: system/config/changes
        rules:
        - cov:
            key: settings  # Monitor entire object structure
    # Input Messages:
    # system/config/updates: {"settings": {"host": "db1", "port": 5432}, "version": "1.0"}
    # system/config/updates: {"settings": {"host": "db1", "port": 5432}, "version": "1.1"} ← FILTERED (settings unchanged)
    # system/config/updates: {"settings": {"host": "db2", "port": 5433}, "version": "1.1"} ← PASSES (settings changed)
    #
    # Output Messages (only when settings object changes):
    # system/config/changes: {"settings": {"host": "db1", "port": 5432}, "version": "1.0"}  
    # system/config/changes: {"settings": {"host": "db2", "port": 5433}, "version": "1.1"}