description: >
  Room temperature monitoring showing both individual and collect processing.
  Demonstrates wildcard usage and why dynamic labels are essential with collect.
  Shows example inputs, collect payload, and transform outputs.

metadata:
  name: Wildcards with Collect and Dynamic Labels

resources:
  # Individual processing - each topic triggers immediately
  individualRoomMapping:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: sensors/+room/temperature
          label: 'room_{room}'  # Simple dynamic label
        publish:
          topic: monitoring/individual-rooms
        rules:
        - transform:
            expression: |
              {
                "timestamp": $now(),
                "room": $context.vars.room,
                "temperature": $.value,
                "location": $context.label
              }
    # Example: Each message triggers immediately, no data aggregation
    # Input 1: sensors/kitchen/temperature → {"value": 23.5, "unit": "celsius"}
    # Output 1: {"timestamp": 1730115600000, "room": "kitchen", "temperature": 23.5, "location": "room_kitchen"}
    # 
    # Input 2: sensors/office/temperature → {"value": 21.2, "unit": "celsius"} 
    # Output 2: {"timestamp": 1730115605000, "room": "office", "temperature": 21.2, "location": "room_office"}
    #
    # Note: Each room triggers separately - no cross-room correlation possible

  # Collect processing - aggregate multiple topics
  buildingClimateMapping:
    type: Cybus::Mapping
    properties:
      mappings:
      - subscribe:
          topic: sensors/+room/temperature
          label: 'room_{room}'  # Prefixed dynamic label - prevents conflicts
        publish:
          topic: building/climate/summary
        rules:
        - collect: {}  # Collect all matching topics
        - transform:
            expression: |
              (
                $trigger := 'room_' & $context.vars.room;
                $triggerData := $lookup($, $trigger);
                $allTemps := $map($keys($), function($k) { $lookup($, $k).value });
                $avgTemp := $average($allTemps);
                {
                  "timestamp": $now(),
                  "triggered_by": {
                    "room": $context.vars.room,
                    "temperature": $triggerData.value,
                    "vs_average": $round($triggerData.value - $avgTemp, 1)
                  },
                  "building_summary": {
                    "total_rooms": $count($keys($)),
                    "average_temperature": $round($avgTemp, 1),
                    "temperature_range": $round($max($allTemps) - $min($allTemps), 1)
                  },
                  "all_rooms_data": $
                }
              )
    # Example Flow: Messages accumulate in collect cache, any new message triggers transform
    #
    # Step 1 - Input Messages:
    # sensors/kitchen/temperature → {"value": 23.5, "unit": "celsius"}
    # sensors/office/temperature → {"value": 21.2, "unit": "celsius"}
    # sensors/lobby/temperature → {"value": 22.8, "unit": "celsius"}
    #
    # Step 2 - Collect Payload (before transform):
    # {
    #   "room_kitchen": {"value": 23.5, "unit": "celsius"},
    #   "room_office": {"value": 21.2, "unit": "celsius"},
    #   "room_lobby": {"value": 22.8, "unit": "celsius"}
    # }
    #
    # Step 3 - Transform Output (when lobby message arrives):
    # {
    #   "timestamp": 1730115600000,
    #   "triggered_by": {
    #     "room": "lobby",
    #     "temperature": 22.8,
    #     "vs_average": 0.3
    #   },
    #   "building_summary": {
    #     "total_rooms": 3,
    #     "average_temperature": 22.5,
    #     "temperature_range": 2.3
    #   },
    #   "all_rooms_data": {
    #     "room_kitchen": {"value": 23.5, "unit": "celsius"},
    #     "room_office": {"value": 21.2, "unit": "celsius"},
    #     "room_lobby": {"value": 22.8, "unit": "celsius"}
    #   }
    # }
    #
    # Key Benefits:
    # ✅ Cross-room analysis (average, range, comparisons)
    # ✅ Complete building context in every transform
    # ✅ Dynamic labels prevent data loss when multiple rooms send data